import logging
{% if cookiecutter.plugin_options=="y"  %}from pprint import pformat{% endif %}
{% if cookiecutter.plugin_type=="Credentials_Collector" %}from typing import Any, Mapping, Sequence{% else %}from typing import Any, Mapping{% endif %}

from agentpluginapi import ({% if cookiecutter.plugin_type=="Exploiter"  %}
    ExploiterResult,{% elif cookiecutter.plugin_type=="Payload" %}PayloadResult,{% endif %}
    IAgentBinaryRepository,
    IAgentCommandBuilderFactory,
    IAgentEventPublisher,
    IPropagationCredentialsRepository,
    LocalMachineInfo,
    TargetHost,
)
{% if cookiecutter.plugin_type=="Credentials_Collector" %}from monkeytypes import AgentID, Credentials, Event{% else %}from monkeytypes import AgentID, Event{% endif %}
{% if cookiecutter.plugin_options=="y"  %}
from .{{ cookiecutter.__plugin_name }}_options import {{ cookiecutter.plugin_name }}Options

logger = logging.getLogger(__name__){% endif %}


class Plugin:
    def __init__(
        self,
        *,
        plugin_name: str = "",
        agent_id: AgentID,
        agent_event_publisher: IAgentEventPublisher,
        agent_binary_repository: IAgentBinaryRepository,
        propagation_credentials_repository: IPropagationCredentialsRepository,
        local_machine_info: LocalMachineInfo,
        agent_command_builder_factory: IAgentCommandBuilderFactory,
        **kwargs,
    ):
        self._plugin_name = plugin_name
        self._agent_id = agent_id
        self._agent_event_publisher = agent_event_publisher
        self._agent_binary_repository = agent_binary_repository
        self._local_machine_info = local_machine_info
        self._agent_command_builder_factory = agent_command_builder_factory

    def run(
        self,
        *,
        host: TargetHost,
        options: Dict[str, Any],
        interrupt: Event,
        **kwargs,
    ) -> {% if cookiecutter.plugin_type=="Exploiter"  %}ExploiterResult{% elif cookiecutter.plugin_type=="Credentials_Collector" %}Sequence[Credentials]{% elif cookiecutter.plugin_type=="Payload" %}PayloadResult{% endif %}:{% if cookiecutter.plugin_options=="y"  %}
        try:
            logger.debug("Parsing options: {pformat(options)}")
            {{ cookiecutter.__plugin_name }}_options = {{ cookiecutter.plugin_name }}Options(**options)
        except Exception as err:
            {% if cookiecutter.plugin_type!="Credentials_Collector" %}msg = f"Error parsing options: {err}"
            logger.error(msg){% else %}logger.error(f"Error parsing options: {err}"){% endif %}
            return {% if cookiecutter.plugin_type=="Exploiter"  %}ExploiterResult(exploitation_success=False, propagation_success=False, error_message=msg){% elif cookiecutter.plugin_type=="Credentials_Collector" %}[]{% elif cookiecutter.plugin_type=="Payload" %}PayloadResults(success=False, error_message=msg){% endif %}{% endif %}
        
        # Here goes your plugin code
        
        # Configure return based on your plugin results
        return {% if cookiecutter.plugin_type=="Exploiter"  %}ExploiterResult(exploitation_success=True, propagation_success=True){% elif cookiecutter.plugin_type=="Credentials_Collector" %}[]{% elif cookiecutter.plugin_type=="Payload" %}PayloadResults(success=True){% endif %}
