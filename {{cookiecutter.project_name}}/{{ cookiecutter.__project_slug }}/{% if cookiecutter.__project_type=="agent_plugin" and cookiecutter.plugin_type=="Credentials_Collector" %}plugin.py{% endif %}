import logging
{% if cookiecutter.plugin_options=="y"  %}from pprint import pformat{% endif %}
from typing import Any, Dict, Sequence

from agentpluginapi import IAgentEventPublisher, LocalMachineInfo
from monkeytypes import AgentID, Credentials, Event
{% if cookiecutter.plugin_options=="y"  %}
from .{{ cookiecutter.__plugin_name }}_options import {{ cookiecutter.plugin_name }}Options

logger = logging.getLogger(__name__){% endif %}


class Plugin:
    def __init__(
        self,
        *,
        plugin_name: str = "",
        agent_id: AgentID,
        agent_event_publisher: IAgentEventPublisher,
        local_machine_info: LocalMachineInfo,
        **kwargs,
    ):
        self._plugin_name = plugin_name
        self._agent_id = agent_id
        self._agent_event_publisher = agent_event_publisher
        self._local_machine_info = local_machine_info

    def run(
        self,
        *,
        options: Dict[str, Any],
        interrupt: Event,
        **kwargs,
    ) -> Sequence[Credentials]:{% if cookiecutter.plugin_options=="y"  %}
        try:
            logger.debug("Parsing options: {pformat(options)}")
            {{ cookiecutter.__plugin_name }}_options = {{ cookiecutter.plugin_name }}Options(**options)
        except Exception as err:
            logger.error(f"Error parsing options: {err}")
            return []{% endif %}
        
        # YOUR PLUGIN CODE GOES HERE
        
        # Configure return based on your plugin results
        return []
